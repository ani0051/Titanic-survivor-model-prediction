{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":2879186,"sourceType":"datasetVersion","datasetId":826163}],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/ananyabisht0000/titanic-survivor-analysis?scriptVersionId=223941929\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-02-22T18:47:08.328662Z","iopub.execute_input":"2025-02-22T18:47:08.329079Z","iopub.status.idle":"2025-02-22T18:47:08.821931Z","shell.execute_reply.started":"2025-02-22T18:47:08.329045Z","shell.execute_reply":"2025-02-22T18:47:08.820851Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport seaborn as sb\nimport matplotlib.pyplot as plt\n\nimport math\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T18:47:08.823388Z","iopub.execute_input":"2025-02-22T18:47:08.823892Z","iopub.status.idle":"2025-02-22T18:47:09.309533Z","shell.execute_reply.started":"2025-02-22T18:47:08.823825Z","shell.execute_reply":"2025-02-22T18:47:09.308637Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# *Cleaning data :*","metadata":{}},{"cell_type":"code","source":"titanic_dataset=pd.read_csv(\"/kaggle/input/test-file/tested.csv\")\ntitanic_dataset.head(10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T18:47:09.311984Z","iopub.execute_input":"2025-02-22T18:47:09.312499Z","iopub.status.idle":"2025-02-22T18:47:09.359014Z","shell.execute_reply.started":"2025-02-22T18:47:09.312468Z","shell.execute_reply":"2025-02-22T18:47:09.358132Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(\"# of passengers in original data: \" + str(len(titanic_dataset.index)))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T18:47:09.360412Z","iopub.execute_input":"2025-02-22T18:47:09.361057Z","iopub.status.idle":"2025-02-22T18:47:09.366814Z","shell.execute_reply.started":"2025-02-22T18:47:09.361014Z","shell.execute_reply":"2025-02-22T18:47:09.365545Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Analysing data ","metadata":{}},{"cell_type":"markdown","source":"* counting the survivors","metadata":{}},{"cell_type":"code","source":"sb.countplot(x=\"Survived\",data=titanic_dataset)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T18:47:09.368038Z","iopub.execute_input":"2025-02-22T18:47:09.36834Z","iopub.status.idle":"2025-02-22T18:47:09.647214Z","shell.execute_reply.started":"2025-02-22T18:47:09.368315Z","shell.execute_reply":"2025-02-22T18:47:09.645866Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"* counting survivors based on gender (female and male )","metadata":{}},{"cell_type":"code","source":"print(titanic_dataset.isnull().sum())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T18:47:09.64834Z","iopub.execute_input":"2025-02-22T18:47:09.64886Z","iopub.status.idle":"2025-02-22T18:47:09.6581Z","shell.execute_reply.started":"2025-02-22T18:47:09.648793Z","shell.execute_reply":"2025-02-22T18:47:09.656266Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sb.countplot(x='Survived',hue='Sex',data=titanic_dataset)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T18:47:09.65953Z","iopub.execute_input":"2025-02-22T18:47:09.660173Z","iopub.status.idle":"2025-02-22T18:47:09.875107Z","shell.execute_reply.started":"2025-02-22T18:47:09.66012Z","shell.execute_reply":"2025-02-22T18:47:09.874042Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"1. With this we can interpret that females were first helped which resulted in\n    their survival\n2. As we don't have real data as of who survived due to which it can be seen as     an error in data ","metadata":{}},{"cell_type":"code","source":"sb.countplot(x='Survived',hue='Pclass',data=titanic_dataset)\nplt.xticks(ticks=[0, 1], labels=[\"Did Not Survive\", \"Survived\"])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T18:47:09.876334Z","iopub.execute_input":"2025-02-22T18:47:09.876771Z","iopub.status.idle":"2025-02-22T18:47:10.124612Z","shell.execute_reply.started":"2025-02-22T18:47:09.87673Z","shell.execute_reply":"2025-02-22T18:47:10.123474Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"* Most people who died were from 3rd class.\n* 1st class passengers had the highest survival rate.\n* 2nd class survival was in between.","metadata":{}},{"cell_type":"code","source":"titanic_dataset[\"Age\"].plot.hist()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T18:47:10.128232Z","iopub.execute_input":"2025-02-22T18:47:10.128561Z","iopub.status.idle":"2025-02-22T18:47:10.544388Z","shell.execute_reply.started":"2025-02-22T18:47:10.128533Z","shell.execute_reply":"2025-02-22T18:47:10.543103Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"titanic_dataset[\"Age\"].skew()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T18:47:10.545649Z","iopub.execute_input":"2025-02-22T18:47:10.545956Z","iopub.status.idle":"2025-02-22T18:47:10.55285Z","shell.execute_reply.started":"2025-02-22T18:47:10.545931Z","shell.execute_reply":"2025-02-22T18:47:10.551659Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Interpretation:\n* Since the value is greater than 0, it indicates that the dataset has a longer\n  tail on the right (higher ages).\n* However, 0.457 is close to 0, meaning the skewness is not very strongâ€”it's       only moderately right-skewed.\n* This suggests that there were more younger passengers, but a few older           passengers (higher ages) caused a slight rightward tail.","metadata":{}},{"cell_type":"code","source":"titanic_dataset.isnull()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T18:47:10.554006Z","iopub.execute_input":"2025-02-22T18:47:10.554423Z","iopub.status.idle":"2025-02-22T18:47:10.589293Z","shell.execute_reply.started":"2025-02-22T18:47:10.55438Z","shell.execute_reply":"2025-02-22T18:47:10.588032Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Train data and test data ","metadata":{}},{"cell_type":"markdown","source":"* build model on train data\n* predict output on test data ","metadata":{}},{"cell_type":"markdown","source":"* To evaluate a machine learning model's performance, we must train it on one      part of the dataset (training set) and test it on unseen data (test set). ","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T18:47:10.590527Z","iopub.execute_input":"2025-02-22T18:47:10.590964Z","iopub.status.idle":"2025-02-22T18:47:10.597451Z","shell.execute_reply.started":"2025-02-22T18:47:10.59093Z","shell.execute_reply":"2025-02-22T18:47:10.595694Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Training data = 70%\nTesting data  = 30%","metadata":{}},{"cell_type":"code","source":"x=titanic_dataset.drop(\"Survived\" ,axis=1)\ny=titanic_dataset[\"Survived\"]\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=1)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T18:51:40.860058Z","iopub.execute_input":"2025-02-22T18:51:40.860411Z","iopub.status.idle":"2025-02-22T18:51:40.870758Z","shell.execute_reply.started":"2025-02-22T18:51:40.860384Z","shell.execute_reply":"2025-02-22T18:51:40.869254Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression\nmodel=LogisticRegression()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T18:47:10.634175Z","iopub.execute_input":"2025-02-22T18:47:10.634633Z","iopub.status.idle":"2025-02-22T18:47:10.670729Z","shell.execute_reply.started":"2025-02-22T18:47:10.634591Z","shell.execute_reply":"2025-02-22T18:47:10.669238Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(X_train.dtypes)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T18:57:01.809264Z","iopub.execute_input":"2025-02-22T18:57:01.809697Z","iopub.status.idle":"2025-02-22T18:57:01.819348Z","shell.execute_reply.started":"2025-02-22T18:57:01.809663Z","shell.execute_reply":"2025-02-22T18:57:01.817352Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import numpy as np\n\n# Find columns that are still object type\nnon_numeric_cols = X_train.select_dtypes(include=['object']).columns\nprint(\"Non-numeric columns:\", non_numeric_cols)\n\n# Check if there are any unexpected string values\nfor col in non_numeric_cols:\n    print(f\"Unique values in {col}: {X_train[col].unique()}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T18:58:03.668545Z","iopub.execute_input":"2025-02-22T18:58:03.669Z","iopub.status.idle":"2025-02-22T18:58:03.677411Z","shell.execute_reply.started":"2025-02-22T18:58:03.668967Z","shell.execute_reply":"2025-02-22T18:58:03.676014Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(X_train.isnull().sum().sum())  # Total missing values\nprint(X_test.isnull().sum().sum())  # Total missing values\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T18:58:47.789989Z","iopub.execute_input":"2025-02-22T18:58:47.790422Z","iopub.status.idle":"2025-02-22T18:58:47.805432Z","shell.execute_reply.started":"2025-02-22T18:58:47.790391Z","shell.execute_reply":"2025-02-22T18:58:47.803502Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X_train = X_train.fillna(0)\nX_test = X_test.fillna(0)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T18:59:15.851614Z","iopub.execute_input":"2025-02-22T18:59:15.852242Z","iopub.status.idle":"2025-02-22T18:59:15.859784Z","shell.execute_reply.started":"2025-02-22T18:59:15.852193Z","shell.execute_reply":"2025-02-22T18:59:15.858494Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(X_train.head())\nprint(X_train.dtypes)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T18:59:47.96409Z","iopub.execute_input":"2025-02-22T18:59:47.964444Z","iopub.status.idle":"2025-02-22T18:59:47.983732Z","shell.execute_reply.started":"2025-02-22T18:59:47.964419Z","shell.execute_reply":"2025-02-22T18:59:47.981756Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(X_train.select_dtypes(include=['object']).columns)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T19:00:36.479634Z","iopub.execute_input":"2025-02-22T19:00:36.480117Z","iopub.status.idle":"2025-02-22T19:00:36.487975Z","shell.execute_reply.started":"2025-02-22T19:00:36.480083Z","shell.execute_reply":"2025-02-22T19:00:36.486199Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(X_train.applymap(lambda x: isinstance(x, str)).sum())\nX_train = X_train.apply(pd.to_numeric, errors='coerce')\nX_test = X_test.apply(pd.to_numeric, errors='coerce')\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T19:01:36.586326Z","iopub.execute_input":"2025-02-22T19:01:36.586675Z","iopub.status.idle":"2025-02-22T19:01:36.823681Z","shell.execute_reply.started":"2025-02-22T19:01:36.586651Z","shell.execute_reply":"2025-02-22T19:01:36.822235Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(X_train.isnull().sum().sum())\nX_train = X_train.fillna(X_train.mean())\nX_test = X_test.fillna(X_test.mean())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T19:02:20.299631Z","iopub.execute_input":"2025-02-22T19:02:20.300063Z","iopub.status.idle":"2025-02-22T19:02:20.540766Z","shell.execute_reply.started":"2025-02-22T19:02:20.300031Z","shell.execute_reply":"2025-02-22T19:02:20.539209Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X_train = X_train.reset_index(drop=True)\ny_train = y_train.reset_index(drop=True)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T19:02:34.072951Z","iopub.execute_input":"2025-02-22T19:02:34.073474Z","iopub.status.idle":"2025-02-22T19:02:34.096739Z","shell.execute_reply.started":"2025-02-22T19:02:34.073436Z","shell.execute_reply":"2025-02-22T19:02:34.095044Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model.fit(X_train, y_train)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T19:02:49.188217Z","iopub.execute_input":"2025-02-22T19:02:49.18862Z","iopub.status.idle":"2025-02-22T19:02:49.272786Z","shell.execute_reply.started":"2025-02-22T19:02:49.188592Z","shell.execute_reply":"2025-02-22T19:02:49.271455Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"This means the model couldn't find the optimal solution in the given number of iterations.So we are increasing iteration","metadata":{}},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression\n\nmodel = LogisticRegression(max_iter=1000)  # Increase to 1000 or more\nmodel.fit(X_train, y_train)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T19:03:53.082378Z","iopub.execute_input":"2025-02-22T19:03:53.082792Z","iopub.status.idle":"2025-02-22T19:03:53.485791Z","shell.execute_reply.started":"2025-02-22T19:03:53.082758Z","shell.execute_reply":"2025-02-22T19:03:53.484345Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"predictions=model.predict(x_train)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T19:11:11.695125Z","iopub.execute_input":"2025-02-22T19:11:11.695571Z","iopub.status.idle":"2025-02-22T19:11:11.736304Z","shell.execute_reply.started":"2025-02-22T19:11:11.695539Z","shell.execute_reply":"2025-02-22T19:11:11.734472Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X_train = pd.get_dummies(X_train, drop_first=True)\nX_test = pd.get_dummies(X_test, drop_first=True)\n# Align columns so both train and test have the same features\nX_test = X_test.reindex(columns=X_train.columns, fill_value=0)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T19:12:51.88246Z","iopub.execute_input":"2025-02-22T19:12:51.882883Z","iopub.status.idle":"2025-02-22T19:12:51.895239Z","shell.execute_reply.started":"2025-02-22T19:12:51.882855Z","shell.execute_reply":"2025-02-22T19:12:51.893671Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Convert categorical variables into one-hot encoding\nX_test = pd.get_dummies(X_test, drop_first=True)\n\n# Align test set columns with train set columns\nX_test = X_test.reindex(columns=X_train.columns, fill_value=0)\n\n# Now make predictions\ny_pred = model.predict(X_test)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T19:14:01.381349Z","iopub.execute_input":"2025-02-22T19:14:01.381736Z","iopub.status.idle":"2025-02-22T19:14:01.400678Z","shell.execute_reply.started":"2025-02-22T19:14:01.381709Z","shell.execute_reply":"2025-02-22T19:14:01.39949Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"predictions=model.predict(x_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T19:14:28.799139Z","iopub.execute_input":"2025-02-22T19:14:28.799487Z","iopub.status.idle":"2025-02-22T19:14:28.824816Z","shell.execute_reply.started":"2025-02-22T19:14:28.799459Z","shell.execute_reply":"2025-02-22T19:14:28.823024Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X_test = pd.get_dummies(X_test, drop_first=True)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T19:15:47.373096Z","iopub.execute_input":"2025-02-22T19:15:47.373428Z","iopub.status.idle":"2025-02-22T19:15:47.380697Z","shell.execute_reply.started":"2025-02-22T19:15:47.373404Z","shell.execute_reply":"2025-02-22T19:15:47.379478Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X_test = X_test.reindex(columns=X_train.columns, fill_value=0)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T19:15:58.544743Z","iopub.execute_input":"2025-02-22T19:15:58.545168Z","iopub.status.idle":"2025-02-22T19:15:58.550992Z","shell.execute_reply.started":"2025-02-22T19:15:58.545138Z","shell.execute_reply":"2025-02-22T19:15:58.549325Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Apply one-hot encoding to X_test\nX_test = pd.get_dummies(X_test, drop_first=True)\n\n# Align test set columns with train set columns\nX_test = X_test.reindex(columns=X_train.columns, fill_value=0)\n\n# Now make predictions\npredictions = model.predict(X_test)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T19:16:08.142521Z","iopub.execute_input":"2025-02-22T19:16:08.142942Z","iopub.status.idle":"2025-02-22T19:16:08.160494Z","shell.execute_reply.started":"2025-02-22T19:16:08.142914Z","shell.execute_reply":"2025-02-22T19:16:08.158994Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(\"Columns in X_train but not in X_test:\", set(X_train.columns) - set(X_test.columns))\nprint(\"Columns in X_test but not in X_train:\", set(X_test.columns) - set(X_train.columns))\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(\"X_train shape:\", X_train.shape)\nprint(\"X_test shape:\", X_test.shape)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T19:17:37.092215Z","iopub.execute_input":"2025-02-22T19:17:37.092614Z","iopub.status.idle":"2025-02-22T19:17:37.100055Z","shell.execute_reply.started":"2025-02-22T19:17:37.092586Z","shell.execute_reply":"2025-02-22T19:17:37.098324Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Check if column names are identical in order\nprint((X_train.columns == X_test.columns).all())  \n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T19:18:30.985318Z","iopub.execute_input":"2025-02-22T19:18:30.985775Z","iopub.status.idle":"2025-02-22T19:18:30.991565Z","shell.execute_reply.started":"2025-02-22T19:18:30.985737Z","shell.execute_reply":"2025-02-22T19:18:30.990348Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(type(X_test))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T19:19:10.51164Z","iopub.execute_input":"2025-02-22T19:19:10.512111Z","iopub.status.idle":"2025-02-22T19:19:10.519131Z","shell.execute_reply.started":"2025-02-22T19:19:10.512074Z","shell.execute_reply":"2025-02-22T19:19:10.517447Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(model.feature_names_in_)\nprint(X_train.columns)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T19:19:38.12192Z","iopub.execute_input":"2025-02-22T19:19:38.122342Z","iopub.status.idle":"2025-02-22T19:19:38.13126Z","shell.execute_reply.started":"2025-02-22T19:19:38.122309Z","shell.execute_reply":"2025-02-22T19:19:38.12974Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model.fit(X_train, y_train)\npredictions = model.predict(X_test)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T19:20:57.423482Z","iopub.execute_input":"2025-02-22T19:20:57.423949Z","iopub.status.idle":"2025-02-22T19:20:57.794624Z","shell.execute_reply.started":"2025-02-22T19:20:57.423907Z","shell.execute_reply":"2025-02-22T19:20:57.793409Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X_train.columns = X_train.columns.str.strip()\nX_test.columns = X_test.columns.str.strip()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T19:21:09.160211Z","iopub.execute_input":"2025-02-22T19:21:09.16062Z","iopub.status.idle":"2025-02-22T19:21:09.16792Z","shell.execute_reply.started":"2025-02-22T19:21:09.160589Z","shell.execute_reply":"2025-02-22T19:21:09.166395Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(X_train.columns.duplicated().sum())  \nprint(X_test.columns.duplicated().sum())  \n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T19:21:19.587516Z","iopub.execute_input":"2025-02-22T19:21:19.587917Z","iopub.status.idle":"2025-02-22T19:21:19.595296Z","shell.execute_reply.started":"2025-02-22T19:21:19.587887Z","shell.execute_reply":"2025-02-22T19:21:19.59365Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"predictions = model.predict(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T19:21:32.937906Z","iopub.execute_input":"2025-02-22T19:21:32.93837Z","iopub.status.idle":"2025-02-22T19:21:32.961431Z","shell.execute_reply.started":"2025-02-22T19:21:32.938337Z","shell.execute_reply":"2025-02-22T19:21:32.959389Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(model.feature_names_in_)\nprint(X_train.columns)\nprint(X_test.columns)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T19:21:50.948487Z","iopub.execute_input":"2025-02-22T19:21:50.9489Z","iopub.status.idle":"2025-02-22T19:21:50.957459Z","shell.execute_reply.started":"2025-02-22T19:21:50.948869Z","shell.execute_reply":"2025-02-22T19:21:50.955941Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import pandas as pd\n\n# Sample DataFrame (replace with your actual data)\ndf = pd.DataFrame({'Name': [\n    'Braund, Mr. Owen Harris',\n    'Cumings, Mrs. John Bradley (Florence Briggs Thayer)',\n    'Heikkinen, Miss. Laina',\n    'Futrelle, Mrs. Jacques Heath (Lily May Peel)',\n    'Allen, Mr. William Henry'\n]})\n\n# Extract titles using regex\ndf['Title'] = df['Name'].str.extract(r' ([A-Za-z]+)\\.')\n\n# Standardizing uncommon titles\ntitle_mapping = {\n    \"Mlle\": \"Miss\",\n    \"Ms\": \"Miss\",\n    \"Mme\": \"Mrs\",\n    \"Sir\": \"Mr\",\n    \"Lady\": \"Mrs\",\n    \"Countess\": \"Mrs\",\n    \"Dona\": \"Mrs\",\n    \"Jonkheer\": \"Mr\",\n    \"Capt\": \"Mr\",\n    \"Col\": \"Mr\",\n    \"Don\": \"Mr\",\n    \"Dr\": \"Mr\",\n    \"Major\": \"Mr\",\n    \"Rev\": \"Mr\"\n}\ndf['Title'] = df['Title'].replace(title_mapping)\n\n# One-hot encoding the Title\ndf = pd.get_dummies(df, columns=['Title'], drop_first=True)\n\nprint(df)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T19:23:11.630647Z","iopub.execute_input":"2025-02-22T19:23:11.631119Z","iopub.status.idle":"2025-02-22T19:23:11.647914Z","shell.execute_reply.started":"2025-02-22T19:23:11.631085Z","shell.execute_reply":"2025-02-22T19:23:11.646387Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import pandas as pd\n\n# Sample DataFrame (replace with your actual data)\ndf = pd.DataFrame({'Name': [\n    'Braund, Mr. Owen Harris',\n    'Cumings, Mrs. John Bradley (Florence Briggs Thayer)',\n    'Heikkinen, Miss. Laina',\n    'Futrelle, Mrs. Jacques Heath (Lily May Peel)',\n    'Allen, Mr. William Henry'\n]})\n\n# Extract titles using regex\ndf['Title'] = df['Name'].str.extract(r' ([A-Za-z]+)\\.')\n\n# Standardizing uncommon titles\ntitle_mapping = {\n    \"Mlle\": \"Miss\",\n    \"Ms\": \"Miss\",\n    \"Mme\": \"Mrs\",\n    \"Sir\": \"Mr\",\n    \"Lady\": \"Mrs\",\n    \"Countess\": \"Mrs\",\n    \"Dona\": \"Mrs\",\n    \"Jonkheer\": \"Mr\",\n    \"Capt\": \"Mr\",\n    \"Col\": \"Mr\",\n    \"Don\": \"Mr\",\n    \"Dr\": \"Mr\",\n    \"Major\": \"Mr\",\n    \"Rev\": \"Mr\"\n}\ndf['Title'] = df['Title'].replace(title_mapping)\n\n# One-hot encoding the Title\ndf = pd.get_dummies(df, columns=['Title'])\n\n# Convert boolean to integer (optional but recommended)\ndf.iloc[:, 1:] = df.iloc[:, 1:].astype(int)\n\nprint(df)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T19:23:50.436507Z","iopub.execute_input":"2025-02-22T19:23:50.437083Z","iopub.status.idle":"2025-02-22T19:23:50.458706Z","shell.execute_reply.started":"2025-02-22T19:23:50.437045Z","shell.execute_reply":"2025-02-22T19:23:50.457395Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import pandas as pd\n\n# Sample DataFrame\ndf = pd.DataFrame({'Name': [\n    'Braund, Mr. Owen Harris',\n    'Cumings, Mrs. John Bradley (Florence Briggs Thayer)',\n    'Heikkinen, Miss. Laina',\n    'Futrelle, Mrs. Jacques Heath (Lily May Peel)',\n    'Allen, Mr. William Henry'\n]})\n\n# Extract title using regex\ndf['Title'] = df['Name'].str.extract(r' ([A-Za-z]+)\\.')\n\n# Standardizing uncommon titles\ntitle_mapping = {\n    \"Mlle\": \"Miss\",\n    \"Ms\": \"Miss\",\n    \"Mme\": \"Mrs\",\n    \"Sir\": \"Mr\",\n    \"Lady\": \"Mrs\",\n    \"Countess\": \"Mrs\",\n    \"Dona\": \"Mrs\",\n    \"Jonkheer\": \"Mr\",\n    \"Capt\": \"Mr\",\n    \"Col\": \"Mr\",\n    \"Don\": \"Mr\",\n    \"Dr\": \"Mr\",\n    \"Major\": \"Mr\",\n    \"Rev\": \"Mr\"\n}\ndf['Title'] = df['Title'].replace(title_mapping)\n\n# One-hot encoding the Title\ndf = pd.get_dummies(df, columns=['Title'], dtype=int)  # âœ… Explicitly set dtype=int\n\nprint(df)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T19:24:20.829179Z","iopub.execute_input":"2025-02-22T19:24:20.829539Z","iopub.status.idle":"2025-02-22T19:24:20.846807Z","shell.execute_reply.started":"2025-02-22T19:24:20.829512Z","shell.execute_reply":"2025-02-22T19:24:20.845318Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(df[['Name', 'Title']])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T19:25:02.579429Z","iopub.execute_input":"2025-02-22T19:25:02.579859Z","iopub.status.idle":"2025-02-22T19:25:02.607373Z","shell.execute_reply.started":"2025-02-22T19:25:02.579808Z","shell.execute_reply":"2025-02-22T19:25:02.605203Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df['Title'] = df['Name'].str.extract(r' ([A-Za-z]+)\\.', expand=False)\n\n# Check if Title is extracted correctly\nprint(df[['Name', 'Title']].head())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T19:25:46.346133Z","iopub.execute_input":"2025-02-22T19:25:46.346486Z","iopub.status.idle":"2025-02-22T19:25:46.356926Z","shell.execute_reply.started":"2025-02-22T19:25:46.34646Z","shell.execute_reply":"2025-02-22T19:25:46.355085Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"title_dummies = pd.get_dummies(df['Title'], prefix='Title')\ndf = pd.concat([df, title_dummies], axis=1)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T19:25:55.120557Z","iopub.execute_input":"2025-02-22T19:25:55.120996Z","iopub.status.idle":"2025-02-22T19:25:55.129127Z","shell.execute_reply.started":"2025-02-22T19:25:55.120965Z","shell.execute_reply":"2025-02-22T19:25:55.127623Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(df[['Title', 'Title_Miss', 'Title_Mr', 'Title_Mrs']].head())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T19:26:04.310898Z","iopub.execute_input":"2025-02-22T19:26:04.311278Z","iopub.status.idle":"2025-02-22T19:26:04.321528Z","shell.execute_reply.started":"2025-02-22T19:26:04.31125Z","shell.execute_reply":"2025-02-22T19:26:04.320214Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Drop duplicate title columns if they exist\ndf = df.loc[:, ~df.columns.duplicated()]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T19:26:31.848376Z","iopub.execute_input":"2025-02-22T19:26:31.84886Z","iopub.status.idle":"2025-02-22T19:26:31.856849Z","shell.execute_reply.started":"2025-02-22T19:26:31.848802Z","shell.execute_reply":"2025-02-22T19:26:31.855217Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Extract Title\ndf['Title'] = df['Name'].str.extract(r' ([A-Za-z]+)\\.', expand=False)\n\n# One-hot encode Titles\ntitle_dummies = pd.get_dummies(df['Title'], prefix='Title', dtype=int)\n\n# Merge and avoid duplication\ndf = df.drop(columns=['Title'], errors='ignore')  # Remove 'Title' if it already exists\ndf = pd.concat([df, title_dummies], axis=1)\n\n# Verify the final result\nprint(df.head())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T19:26:40.212017Z","iopub.execute_input":"2025-02-22T19:26:40.212506Z","iopub.status.idle":"2025-02-22T19:26:40.230948Z","shell.execute_reply.started":"2025-02-22T19:26:40.21246Z","shell.execute_reply":"2025-02-22T19:26:40.229145Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Drop existing Title-related columns if they exist\ndf = df.loc[:, ~df.columns.duplicated()]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T19:27:59.553208Z","iopub.execute_input":"2025-02-22T19:27:59.553591Z","iopub.status.idle":"2025-02-22T19:27:59.559315Z","shell.execute_reply.started":"2025-02-22T19:27:59.553558Z","shell.execute_reply":"2025-02-22T19:27:59.558098Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import pandas as pd\n\n# Sample data\ndata = {\n    'Name': [\n        'Braund, Mr. Owen Harris',\n        'Cumings, Mrs. John Bradley (Florence Briggs Thayer)',\n        'Heikkinen, Miss. Laina',\n        'Futrelle, Mrs. Jacques Heath (Lily May Peel)',\n        'Allen, Mr. William Henry'\n    ]\n}\n\ndf = pd.DataFrame(data)\n\n# Extract Title\ndf['Title'] = df['Name'].str.extract(r' ([A-Za-z]+)\\.', expand=False)\n\n# One-hot encode Titles\ntitle_dummies = pd.get_dummies(df['Title'], prefix='Title', dtype=int)\n\n# Drop duplicate columns before merging\ndf = df.loc[:, ~df.columns.duplicated()]\n\n# Merge one-hot encoded columns\ndf = pd.concat([df, title_dummies], axis=1)\n\n# Drop the original 'Title' column\ndf = df.drop(columns=['Title'], errors='ignore')\n\n# Print final dataframe\nprint(df)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T19:28:09.907825Z","iopub.execute_input":"2025-02-22T19:28:09.908209Z","iopub.status.idle":"2025-02-22T19:28:09.921555Z","shell.execute_reply.started":"2025-02-22T19:28:09.908182Z","shell.execute_reply":"2025-02-22T19:28:09.92033Z"}},"outputs":[],"execution_count":null},{"cell_type":"raw","source":"predictions=model.predict(x_test)","metadata":{}},{"cell_type":"code","source":"from sklearn.metrics import classification_report\nclassification_report(y_test,predictions)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T19:30:26.03576Z","iopub.execute_input":"2025-02-22T19:30:26.036164Z","iopub.status.idle":"2025-02-22T19:30:26.054503Z","shell.execute_reply.started":"2025-02-22T19:30:26.036137Z","shell.execute_reply":"2025-02-22T19:30:26.053387Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test,predictions)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T20:05:32.139997Z","iopub.execute_input":"2025-02-22T20:05:32.140345Z","iopub.status.idle":"2025-02-22T20:05:32.150162Z","shell.execute_reply.started":"2025-02-22T20:05:32.14032Z","shell.execute_reply":"2025-02-22T20:05:32.149076Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Therefore , \n1. True Positive =80\n2. False Negative =5\n3. False Positive =33\n4. True Negative = 8","metadata":{}},{"cell_type":"markdown","source":"# Accuracy  of model","metadata":{}},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test,predictions)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-22T20:10:07.943596Z","iopub.execute_input":"2025-02-22T20:10:07.944052Z","iopub.status.idle":"2025-02-22T20:10:07.954207Z","shell.execute_reply.started":"2025-02-22T20:10:07.94402Z","shell.execute_reply":"2025-02-22T20:10:07.952692Z"}},"outputs":[],"execution_count":null}]}